@typeparam TRowData
@using System.Linq.Expressions
@using Humanizer
@*@if (IsHeader)
{
    var title = Title;
    @if (string.IsNullOrEmpty(title) && Expression != null)
    {
        title = GetMemberName(Expression).Humanize();
    }
    <div class="attribute__container">
        <div class="attribute">@title</div>
    </div>
}
else
{
    var title = Title;
    @if (string.IsNullOrEmpty(title) && Expression != null)
    {
        title = GetMemberName(Expression).Humanize();
    }
    <div class="attribute__container">

        <div class="attribute" data-name=@title>@compiledExpression</div>
    </div>
}*@
@code {
    [CascadingParameter]
    public YLGrid<TRowData> OwnerGrid { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public bool IsHeader { get; set; } = false;
    [Parameter]
    public Expression<Func<TRowData, object>> Expression { get; set; }
    private Func<TRowData, object> compiledExpression;
    private Expression lastCompiledExpression;
    protected override void OnInitialized()
    {
        OwnerGrid.AddGroup(this);

    }

    protected override void OnParametersSet()
    {
        if (lastCompiledExpression == null || lastCompiledExpression != Expression)
        {
            compiledExpression = Expression?.Compile();
            lastCompiledExpression = Expression;

        }
    }
    private static string GetMemberName<T>(Expression<T> expression)
    {
        return expression.Body switch
        {
            MemberExpression m => m.Member.Name,
            UnaryExpression u when u.Operand is MemberExpression m => m.Member.Name,
            _ => throw new NotSupportedException("Expression of type '" + expression.GetType().ToString() + "' is not supported")
        };
    }


}
