@typeparam TRowData
@using Humanizer
@*
    <CascadingValue> allows descendant components (defined in ChildContent) to receive the specified value.
    Child components need to declare a cascading parameter with the same type as "Value" (i.e. Grid<TRowData>).
    This allows GridColumn to get the Grid instance by using a CascadingParameter

        [CascadingParameter]public Grid<TRowData> OwnerGrid { get; set; }

    IsFixed="true" indicates that "Value" will not change. This is a
    performance optimization that allows the framework to skip setting up
    change notifications.
    https://www.meziantou.net/creating-a-datagrid-component-in-blazor.htm
*@
<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

@* Render the table *@
<table @attributes="@TableAttributes">
    <caption>@CellHeader(Caption)</caption>
    <thead>
        
        <tr>
            @foreach (var column in columns)
            {
                @column.HeaderTemplate
               
            }
        </tr>
    </thead>
    <tbody>
        @{
            if (Items != null)
            {
                var index = 0;
                foreach (var item in Items)
                {
                    @* Use @key to help the diff algorithm when updating the collection *@
                    <tr @key="item.GetHashCode()" class="@(RowClass?.Invoke(item, index++))">
                        @foreach (var column in columns)
                        {
                            @column.CellTemplate(item)
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; }

    [Parameter]
    public ICollection<TRowData> Items { get; set; }

    // This fragment should contains all the GridColumn
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Func<TRowData, int, string> RowClass { get; set; }

    [Parameter] public string Caption { get; set; }
    private readonly List<GridColumn<TRowData>> columns = new List<GridColumn<TRowData>>();

    private RenderFragment<string> cellHeadr;

    // GridColumn uses this method to add a column
    internal void AddColumn(GridColumn<TRowData> column)
    {
        columns.Add(column);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }

    internal RenderFragment<string> CellHeader
    {
        get
        {
            return cellHeadr = (str => buider =>
            {
                var header = str.Humanize().ToUpper();
                buider.OpenElement(0, "i");
                buider.AddContent(1, header);
                buider.CloseElement();


            }
                );
        }
    }
}