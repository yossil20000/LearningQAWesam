@typeparam TRowData
@using Humanizer
@using System.Linq.Expressions

<CascadingValue Value="this">@ChildContent</CascadingValue>

<div>
    <section class=@YLGrisClass>
        <ol class="collection collection__container">
            <li class="item item__container current__theme-bg-image color-10">
                @foreach (var group in groups)
                {

                    @if(group.GroupHeaderTemplate != null)
                        @group.GroupHeaderTemplate

                }
            

            </li>
            @if (Items != null)
            {


                @foreach (var item in Items)
                {
                    <li class="item item__container bg-color-9 color-1">

                        @foreach (var group in groups)
                        {
                            @*var title = group.Title;
                            if (string.IsNullOrEmpty(title) && group.Expression != null)
                            {
                                title = GetMemberName(group.Expression).Humanize();
                            }


                            <div class="attribute__container">

                                <div class="attribute" data-name=@title.Humanize()>@group.</div>
                            </div>*@
                            @if(group.GroupCellTemplate != null)
                                @group.GroupCellTemplate(item)
                        }


                    </li>


                }
            }

        </ol>
    </section>
</div>
@code {

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public ICollection<TRowData> Items { get; set; }
    [Parameter] public string ColumnClass { get; set; }
    private string YLGrisClass = "yl-table";

    private readonly List<YLGridGroup<TRowData>> groups = new List<YLGridGroup<TRowData>>();

    internal void AddGroup(YLGridGroup<TRowData> group)
    {
        groups.Add(group);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }
    protected override void OnParametersSet()
    {
        if(!string.IsNullOrEmpty(ColumnClass))
        {
            YLGrisClass = $"{YLGrisClass} {ColumnClass}";
        }

        base.OnParametersSet();

    }
    public string GetPropertyName<T>(Expression<Func<T>> propertyLambda)
    {
        var me = propertyLambda.Body as MemberExpression;

        if (me == null)
        {
            throw new ArgumentException("You must pass a lambda of the form: '() => Class.Property' or '() => object.Property'");
        }

        return me.Member.Name;
    }
    private static string GetMemberName<T>(Expression<T> expression)
    {
        return expression.Body switch
        {
            MemberExpression m => m.Member.Name,
            UnaryExpression u when u.Operand is MemberExpression m => m.Member.Name,
            _ => throw new NotSupportedException("Expression of type '" + expression.GetType().ToString() + "' is not supported")
        };
    }
}
