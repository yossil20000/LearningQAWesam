@typeparam TRowData
@using System.Linq.Expressions
@using Humanizer
@code {
    [CascadingParameter]
    public YLGridGroup<TRowData> OwnerGroup { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Format { get; set; }
    [Parameter]
    public Expression<Func<TRowData, object>> Expression { get; set; }
    [Parameter]
    public Expression<Func<TRowData, object>> Index { get; set; }
    [Parameter]
    public EventCallback<string> OnEdit { get; set; }
    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    private Func<TRowData, object> compiledExpression;
    private Expression lastCompiledExpression;
    private Func<TRowData, object> compiledIndex;
    private Expression lastCompiledIndex;

    private RenderFragment headerTemplate;

    private RenderFragment<TRowData> cellTemplate;
    private TRowData Item;

    internal RenderFragment HeaderTemplate
    {
        get
        {
            string title = Title;
            if (string.IsNullOrEmpty(title) && Expression != null)
            {
                title = GetMemberName(Expression).Humanize();
            }
            return headerTemplate =@:@{
        <div class="attribute">@title</div>
            }
            ;
        }
    }
    @*internal RenderFragment<TRowData> CellTemplate
        {
            get
            {

                string title = Title;
                if (string.IsNullOrEmpty(title) && Expression != null)
                {
                    title = GetMemberName(Expression).Humanize();
                }



                @:@{
                    <div class="attribute" data-name=@title.Humanize()>Cell</div>
                }
                ;
                return cellTemplate;
             }
        }*@
    internal RenderFragment<TRowData> CellTemplate
    {
        get
        {

            cellTemplate = (item) =>
    @:@{

        string title = Title;
        Item = item;
        if (string.IsNullOrEmpty(title) && Expression != null)
        {
            title = GetMemberName(Expression).Humanize();
        }
        if (compiledExpression != null)
        {
            var value = compiledExpression(item);
            var formattedValue = string.IsNullOrEmpty(Format) ? value.ToString() : string.Format("{0:" + Format + "}", value);
            if (lastCompiledIndex != null)
            {
                var index = compiledIndex(item);
                <div class="attribute" data-name=@title @onclick='eventArg => OnClick(eventArg,$"{index.ToString()}")'>
                @if(ChildContent == null)@formattedValue
                else @ChildContent</div>
            }
            else
            {
                <div class="attribute" data-name=@title @onclick='eventArg => OnClick(eventArg,$"{value.ToString()}")'>@formattedValue</div>
            }



        }
        else
        {
            //var value = compiledIndex(item);
            <div class="attribute" data-name=@title @onclick='eventArg => OnClick(eventArg,$"0")'>@ChildContent</div>
        }

    }
    ;

            return cellTemplate;
        }
    }
    private Task OnClick(EventArgs ea, string id)
    {
        if (!string.IsNullOrEmpty(id))
            return OnEdit.InvokeAsync(id);
        return Task.CompletedTask;
    }
    protected override void OnInitialized()
    {
        OwnerGroup.AddColumn(this);

    }
    protected override void OnParametersSet()
    {
        if (lastCompiledExpression == null || lastCompiledExpression != Expression)
        {
            compiledExpression = Expression?.Compile();
            lastCompiledExpression = Expression;

        }
        if (lastCompiledIndex == null || lastCompiledIndex != Index)
        {
            compiledIndex = Index?.Compile();
            lastCompiledIndex = Index;

        }
    }
    private static string GetMemberName<T>(Expression<T> expression)
    {
        return expression.Body switch
        {
            MemberExpression m => m.Member.Name,
            UnaryExpression u when u.Operand is MemberExpression m => m.Member.Name,
            _ => throw new NotSupportedException("Expression of type '" + expression.GetType().ToString() + "' is not supported")
        };
    }
}
