@page "/TestList"
@using LearningQA.Shared.DTO
@using LearningQA.Client.Components

<div class="bg-color-6 color-6">
    <div class="test-item__container bg-color-7 color-2">
        <header class="test-item__container_header current__theme-bg-image--5-9"><div>Header</div></header>
        <div class="test-item__container_aside-header current__theme-bg-image">
            <div>Questions</div>
        </div>
        @if (ExamViewModelPersist != null)
        {
            <EditForm class="test-item__container_selection" Model="ExamViewModelPersist">
                <LearningQA.Client.Components.TestItemSelects TestItemViewModelPersist="ExamViewModelPersist" OnLoadCommand="OnLoadExams" ButtonTitle="Get Exam">

                </LearningQA.Client.Components.TestItemSelects>

            </EditForm>

        }
        else
        {
            <div>
                Inititalzed In Process
            </div>
        }
        @if (IsViewExamsList)
        {
            @if (ExamViewModelPersist.ExamInfoModels != null)
            {
                <div class="test-item__container_question bg-color-8 color-2 r5-2end_c1-2end" style="overflow-y:scroll">
                    <YLGrid Items="ExamViewModelPersist.ExamInfoModels" ColumnClass="yl-column-width-1-3 yl-column-width-2-5 yl-column-width-3-1 ">
                        <YLGridGroup TRowData="ExamInfoModel" GroupClass="filed-width-min-5">
                            <YLGridColumn TRowData="ExamInfoModel" Expression="c => c.DateStart" Format="d" />
                            <YLGridColumn TRowData="ExamInfoModel" Expression="c => c.DateFinish" Format="d" />
                            <YLGridColumn TRowData="ExamInfoModel" Expression="c => c.Mark" />
                        </YLGridGroup>

                        <YLGridGroup TRowData="ExamInfoModel" GroupClass="filed-width-min-5">
                            <YLGridColumn TRowData="ExamInfoModel" Title="Sumn" Expression="c => c.Title" />
                        </YLGridGroup>
                        <YLGridGroup TRowData="ExamInfoModel" GroupClass="filed-width-min-5">
                            <YLGridColumn TRowData="ExamInfoModel" Title="Action" OnEdit="OnExamLoad" Expression="c => c.TestId" Index="c => c.TestId">
                                <input type="button"
                                       class="btn color-2 bg-color-8"
                                       name="Load"
                                       value="Load" />
                            </YLGridColumn>
                            <YLGridColumn TRowData="ExamInfoModel" Title="Action" OnEdit="OnExamDelete" Expression="c => c.TestId" Index="c => c.TestId">
                                <input type="button"
                                       class="btn color-2 bg-color-8"
                                       name="Delete"
                                       value="Delete" />
                            </YLGridColumn>
                        </YLGridGroup>
                    </YLGrid>
                </div>

            }

        }
        @if (ExamViewModelPersist.SelectedQuestion != null && ExamViewModelPersist.SelectedQuestion.Options != null)
        {
            @if (!IsViewExamsList && ExamViewModelPersist.FilteredAnsware != null)
            {
                <div class="test-item__container_question bg-color-8 color-2">
                    @if (ExamViewModelPersist.SelectedQuestion != null)
                    {
                        <h5>Question: @ExamViewModelPersist.SelectedQuestion.QuestionNumber</h5>
                        <p>@((MarkupString)ExamViewModelPersist.SelectedQuestion.Question)</p>
                    }
                </div>
                <div class="test-item__container_option bg-color-9 color-2">
                    <ul>

                        @foreach (var i in ExamViewModelPersist.SelectedQuestion.Options.OrderBy(x => x.TenantId))
                        {
                            <li>
                                <div class="form-check form-switch ">
                                    <input class="form-check-input bg-color-2" type="checkbox" disabled checked="@IsOptionChecked(ExamViewModelPersist.SelectedQuestion, i.TenantId)" id="question-option-2" @onchange="EventArgs => { ExamViewModelPersist.OnOptionChanged(i, EventArgs.Value); }">
                                </div>
                                <p>@i.Content</p>
                            </li>
                        }

                    </ul>
                </div>

            }

            <div class="test-item__container_nav">
                <button class=@($"nav-1 bg-color-7 color-2 {(ExamViewModelPersist.EnablePreviouse ? "" : "disabled")}") @onclick="ExamViewModelPersist.OnPrevious">Previous</button>
                <div class="nav-2">Q</div>
                <input type="number" max=@(ExamViewModelPersist.FilteredAnsware.Count) min="1" class="nav-3 bg-color-7 color-2" value=@(ExamViewModelPersist.CurrentQuestion) @onchange="ChangeEventArgs => { ExamViewModelPersist.OnChangeQuestionNumber(ChangeEventArgs); }">
                <!-- <div class="nav-4"></div> -->
                <button class=@($"nav-5 bg-color-7 color-2 {(ExamViewModelPersist.EnableNext ? "" : "disabled")}" ) @onclick="ExamViewModelPersist.OnNext">Next</button>
                <!-- <div style="width: 2px;"></div> -->

                <button class=" bg-color-7 color-2 nav-7">Start Test</button>
            </div>


            <div class="test-item__container_answer">
                <p class=@($"{(answereExpend ? "" : "visually-hidden")}") id="answer">
                    <ul>
                        @if (ExamViewModelPersist.SelectedQuestion != null)
                        {
                            foreach (var answerOption in ExamViewModelPersist.SelectedQuestion.Options.Where(x => x.IsTrue))
                            {
                                <li>
                                    @($"{answerOption.TenantId} , {answerOption.IsTrue}")
                                </li>
                            }
                        }
                    </ul>

                </p>
            </div>

        }
        <aside class="test-item__container_aside bg-color-5 color-2">

            <select class="bg-color3 color-8" style="width:100%" @bind="ExamViewModelPersist.QuestionListFilter">
                @foreach (var filter in Enum.GetValues(typeof(QuestionListFilter)))
                {
                    <option value="@filter">@filter</option>
                }
            </select>

            <div class="question-list color-5 bg-color-2">

                <ul>

                    @if (ExamViewModelPersist.FilteredAnsware != null)
                    {
                        @foreach (var answer in ExamViewModelPersist.FilteredAnsware)
                        {
                            if (true)
                            {
                                <li class="question-list_item1">
                                    <div class=@($"legend-icon{(answer.IsAnswered ? "_answered" : "")}")></div>
                                    <div class=@($"{(answer.IsCorrect ? "bg-color-10" : "")}")>@answer.QUestionSql.QuestionNumber</div>
                                    @if (answer.IsSelected)
                                    {
                                        <input type="checkbox" title="Remove From Current Test" checked />
                                    }


                                </li>
                            }


                        }
                    }
                </ul>
            </div>

        </aside>
        <div class=@($"test-item__container_supplement {(supplementExpand ? "" : "expande")} bg-color-9 color-2")>
            <div id="container_supplement" class=@($"{(supplementExpand ? "toggle" : "toggle active")}") @onclick="OnSupplementExpandToggle">

            </div>
            @if (ExamViewModelPersist.SelectedQuestion != null && ExamViewModelPersist.SelectedQuestion.Supplements != null)
            {
                @foreach (var supp in ExamViewModelPersist.SelectedQuestion.Supplements)
                {
                    @if (supp.ContentType == ContentType.ImageBase64String)
                    {
                        <img class=@(supp.RotateContent == 0  ? "contain" :  $"contain rotate90") src=@($"data:image/jpeg;base64,{supp.Content}") width="100%" height="100%" alt="base64 test">
                    }
                }
            }
        </div>
        <div class=@($"test-item__container_supplement {(supplementExpand ? "" : "expande")} {(supplementFullExpand ? "" : "full-expande")} bg-color-9 color-2")>
            <div class="operation">
                <div id="container_supplement" class=@($"{(supplementExpand ? "toggle" : "toggle active")}") @onclick="OnSupplementExpandToggle"></div>
                <div id="container_supplement" class=@($"{(supplementFullExpand ? "toggle-full" : "toggle-full active")}") @onclick="OnSupplementFullExpandToggle">        </div>
                <button @onclick="ClearCanvas">Clear</button>
                <button @onclick="NewLine">New Line</button>
            </div>
            @if (ExamViewModelPersist.SelectedQuestion != null && ExamViewModelPersist.SelectedQuestion.Supplements != null)
            {

                @if (ExamViewModelPersist.SelectedSupplement != null )
                {
                     <div class="content" style="position:relative">
                        <img id="imageSupp" @onchange="OnImageChanged" class=@(ExamViewModelPersist.SelectedSupplement.RotateContent == 0  ? "contain" :  $"contain rotate90") src=@($"data:image/jpeg;base64,{ExamViewModelPersist.SelectedSupplement.Content}") alt="base64 test" style="width:100%; display:none;">
                        <canvas id="canvaSupp" class="canvas" style="background-color:yellow" ></canvas>
                      </div>
                    bCanInitCanvas = true;
                }
            }
            


        </div>
        <div class="test-item__container_aside-summary bg-color-6 color-2">
            @if (IsTestMode && ExamViewModelPersist.CurrentTest?.Answers != null)
            {

                <div>Answered</div>
                <div>@(ExamViewModelPersist.CurrentTest.Answers.Where(x => x.IsAnswered).Count())</div>
                <div>Wrong</div>
                <div>@(ExamViewModelPersist.CurrentTest.Answers.Where(x => !x.IsCorrect).Count())</div>

                <div>Remained</div>
                <div>@(ExamViewModelPersist.CurrentTest.Answers.Count() - ExamViewModelPersist.CurrentTest.Answers.Where(x => x.IsAnswered).Count())</div>
                <div>Mark</div>
                <div>@ExamViewModelPersist.CurrentTest?.Mark</div>
            }
        </div>


        <div class="test-item__container_answer-expend bg-color-7 color-2">

            <div id="show-answers" class=@($"{(answereExpend ? "toggle active" : "toggle")}") @onclick="OnAnswerExpandToggle"></div>
            <div>Show / Hide</div>
        </div>


        <div class="test-item__container_aside-header current__theme-bg-image">
            <h6>Questions</h6>
        </div>



        <div class="test-item__container_aside-legend">

            <div class="legend-icon_answered"></div>
            <div>Answered</div>
            <div class="legend-icon_wrong"></div>
            <div>Wrong</div>
            <div class="legend-icon_marked"></div>
            <div>Marked</div>
        </div>
        @*<footer class="test-item__container_footer">Footer</footer>*@
    </div>
</div>

@code {
    //*private RenderFragment<QuestionOption<int>> questionOptionChecbox = (i) =>  @<input class="form-check-input bg-color-2" type="checkbox" checked="@i.IsTrue" disabled id="question-option-2" @onchange="(EventArgs) => { OnOptionChanged(i, EventArgs); }">;*/

    private bool IsTestMode { get; set; } = true;
    private string canvaSuppId = "canvaSupp";
    private string imageSuppId = "imageSupp";
    private bool bRenderSupp = false;
    bool bCanInitCanvas = false;
    private async Task OnExamLoad(object obj)
    {

        if (obj is IWeatherForecast item)
        {
            Console.WriteLine($"OnClick Edit whether {item.Date} {item.TemperatureC}");
        }
        else if (obj is string id)
        {
            Console.WriteLine($"OnClick Edit id:{id}");

            ;
            if( int.TryParse(id, out int testId))
            {
                await  ExamVM.OnExamLoad(testId);
                IsViewExamsList = false;
            }

        }
        await Task.CompletedTask;
    }
    private async Task OnExamDelete(object obj)
    {

        if (obj is IWeatherForecast item)
        {
            Console.WriteLine($"OnClick Edit whether {item.Date} {item.TemperatureC}");
        }
        else if (obj is string id)
        {
            Console.WriteLine($"OnClick Delete id:{id}");

            ;
            if( int.TryParse(id, out int testId))
            {
                await  ExamVM.OnExamDelete(testId);
                IsViewExamsList = true;
            }

        }
        await Task.CompletedTask;
    }
    private void OnSupplementFullExpandToggle()
    {
        supplementFullExpand = !supplementFullExpand;
    }
    private async Task ClearCanvas()
    {
        _ = await canvasClassJsInterop.ClearDraw(canvaSuppId);
    }
    private async Task NewLine()
    {
        _ = await canvasClassJsInterop.NewLine(canvaSuppId);
    }
    private async Task OnImageChanged()
    {
        _ = await canvasClassJsInterop.UpdateImage(canvaSuppId, imageSuppId);
    }
    private async Task<bool> RenderSupp(bool bRenderAlways = false)
    {
        Console.WriteLine($"canvasClassJsInterop != null {canvasClassJsInterop != null } bRenderSupp:{bRenderSupp}");
        if (canvasClassJsInterop != null && (bRenderSupp == false || bRenderAlways))
        {
            Console.WriteLine("RenderSupp");
            _ = await canvasClassJsInterop.InitCanvas("canvaSupp", "imageSupp");
            bRenderSupp = true;
            ExamViewModelPersist.OnChanged(UpdateImage);
            return true;
        }

        return false;
    }
    private void UpdateImage()
    {
        
        StateHasChanged();

    }
    @*@onchange="ChangeEventArgs => { TestItemViewModelPersist.OnChangeQuestionNumber(ChangeEventArgs.Value.ToString()); }"*@
}
